{"version":3,"sources":["shell/settings.tsx","shell/help.tsx","shell/navigation.tsx","shell/shell.tsx","locales sync /.resjson$","locales sync /^/.*/.resjson$","serviceWorker.ts","index.tsx","shell/routes.tsx","i18n.tsx","errorBoundary.tsx","locales/de/translations.resjson","locales/en/translations.resjson"],"names":["Themes","dark","light","fluentLight","fluentDark","SettingsPanel","_ref","loc","onSave","onCancel","settings","_React$useState","React","theme","_React$useState2","Object","slicedToArray","changeTheme","react","ContextPanel","header","footer","Button","onClick","primary","onClose","SelectField","name","label","value","options","autoFocus","onChange","HelpPanel","href","target","rel","cx","classnames","bind","Navigation","NavItem","to","Paths","home","index","exact","title","icon","text","examples","_ref2","react_router_dom","className","activeClassName","ThemeContext","Shell","_useTranslation","useTranslation","_useTranslation2","i18n","expanded","changeExpanded","_React$useState3","_React$useState4","changeSettings","handleViewCollapse","navProps","_React$useState5","_React$useState6","isExpanded","attr","navButton","children","useNavigationProperties","mastheadProps","branding","more","getExpandCallback","selected","navigation","toolbarItems","button","aria-label","user","undefined","getMastheadProperties","Provider","isRtl","dir","masthead","errorBoundary","message","fallback","HorizontalLoader","routes","blockViewCollapse","newSettings","e","stopPropagation","expand","map","./de/translations.resjson","./en/translations.resjson","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","Error","code","keys","resolve","module","exports","Boolean","window","location","hostname","match","ReactDOM","basename","process","shell","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","d","__webpack_exports__","Routes","react__WEBPACK_IMPORTED_MODULE_0__","react_router_dom__WEBPACK_IMPORTED_MODULE_1__","Home","Promise","all","Examples","parameterized","list","inputs","path","component","instance","initInstance","context","require","locales","forEach","key","split","lng","length","push","i18next","use","Backend","LanguageDetector","initReactI18next","on","lang","documentElement","init","backend","allowMultiLoading","loadPath","ns","concat","err","fallbackLng","whitelist","defaultNS","debug","interpolation","escapeValue","postProcess","ErrorBoundary","_React$Component","props","_this","D_w_iot_ux_baseline_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","D_w_iot_ux_baseline_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","D_w_iot_ux_baseline_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","hasError","D_w_iot_ux_baseline_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__","D_w_iot_ux_baseline_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__","error","info","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","Component","p"],"mappings":"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","file":"static/js/main.c3d6a426.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport { ContextPanel } from '@microsoft/azure-iot-ux-fluent-controls/lib/components/ContextPanel';\r\nimport { Button } from '@microsoft/azure-iot-ux-fluent-controls/lib/components/Button';\r\nimport { SelectField } from '@microsoft/azure-iot-ux-fluent-controls/lib/components/Field/SelectField';\r\nimport { TranslationFunction } from '../i18n';\r\n\r\nexport interface Settings {\r\n    theme: string;\r\n}\r\n\r\nexport interface Properties {\r\n    loc: TranslationFunction;\r\n    settings: Settings;\r\n    onSave: (newSettings: Settings) => void;\r\n    onCancel: () => void;\r\n}\r\n\r\nexport const Themes = {\r\n    dark: 'dark',\r\n    light: 'light',\r\n    fluentLight: 'fluent-light',\r\n    fluentDark: 'fluent-dark',\r\n}\r\n\r\nexport function SettingsPanel({ loc, onSave, onCancel, settings }: Properties) {\r\n    const [theme, changeTheme] = React.useState(settings.theme);\r\n    return (\r\n        <ContextPanel\r\n            header={loc('settings.title')}\r\n            footer={\r\n                <>\r\n                    <Button onClick={() => onSave({ theme })} primary>{loc('save')}</Button>\r\n                    <Button onClick={onCancel}>{loc('cancel')}</Button>\r\n                </>\r\n            }\r\n            onClose={onCancel}\r\n        >\r\n            <SelectField\r\n                name='theme'\r\n                label={loc('settings.theme')}\r\n                value={theme}\r\n                options={[\r\n                    { label: loc('settings.themes.dark'), value: Themes.dark },\r\n                    { label: loc('settings.themes.light'), value: Themes.light },\r\n                    { label: loc('settings.themes.fluentLight'), value: Themes.fluentLight },\r\n                    { label: loc('settings.themes.fluentDark'), value: Themes.fluentDark }\r\n                ]}\r\n                autoFocus\r\n                onChange={changeTheme}\r\n            />\r\n        </ContextPanel>\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport { ContextPanel } from '@microsoft/azure-iot-ux-fluent-controls/lib/components/ContextPanel';\r\nimport { TranslationFunction } from '../i18n';\r\n\r\nexport interface Properties {\r\n    loc: TranslationFunction;\r\n    onCancel: () => void;\r\n}\r\n\r\nexport function HelpPanel({ loc, onCancel }: Properties) {\r\n    return (\r\n        <ContextPanel header={loc('help.title')} onClose={onCancel}>\r\n            <a href='https://github.com/Azure/iot-ux-baseline' target='_blank' rel='noopener noreferrer'>{loc('help.getStarted')}</a>\r\n        </ContextPanel>\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport classnames from 'classnames/bind';\r\nimport { TranslationFunction } from '../i18n';\r\n\r\nimport { Paths } from './routes';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst cx = classnames.bind(null);\r\n\r\n/** Declares all the items that need to be injected into the global navigation. */\r\nexport function Navigation({ loc }: { loc: TranslationFunction}) {\r\n    return (\r\n        <>\r\n            <NavItem to={Paths.home.index} exact title={loc('navigation.home')} icon='icon-home' text={loc('navigation.home')} />\r\n            <NavItem to={Paths.examples.index} title={loc('navigation.examples')} icon='icon-education' text={loc('navigation.examples')} />\r\n        </>\r\n    );\r\n}\r\n\r\nfunction NavItem({ to, exact, title, icon, text }: {\r\n    to: string;\r\n    exact?: boolean;\r\n    title: string;\r\n    icon: string;\r\n    text: string;\r\n}) {\r\n    return (\r\n        <NavLink to={to} exact={exact} title={title} className='global-nav-item' activeClassName='global-nav-item-active'>\r\n            <span className={cx('global-nav-item-icon', 'icon', icon)} />\r\n            <span className={cx('inline-text-overflow', 'global-nav-item-text')}>{text}</span>\r\n        </NavLink>\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport { Shell as FluentShell, NavigationProperties, MastheadProperties } from '@microsoft/azure-iot-ux-fluent-controls/lib/components/Shell';\r\nimport { HorizontalLoader } from '@microsoft/azure-iot-ux-fluent-controls/lib/components/Loader/HorizontalLoader';\r\n\r\nimport { TranslationFunction, useTranslation } from '../i18n';\r\nimport { Settings, SettingsPanel, Themes } from './settings';\r\nimport { HelpPanel } from './help';\r\nimport { Routes } from './routes';\r\nimport { Navigation } from './navigation';\r\n\r\nimport './shell.fonts.scss';\r\nimport { ErrorBoundary } from '../errorBoundary';\r\n\r\nexport const ThemeContext = React.createContext<string>(Themes.light);\r\n\r\nexport default function Shell() {\r\n  const [loc, i18n] = useTranslation();\r\n  const [expanded, changeExpanded] = React.useState<string>('');\r\n  const [settings, changeSettings] = React.useState({ theme: Themes.light });\r\n\r\n  function handleViewCollapse() {\r\n    // reset expanded to its default state. IMPORTANT: don't stop event\r\n    // propagation here: this will block clicking behavior for some html\r\n    // elements like <a>, input checkboxes, and buttons.\r\n    changeExpanded('');\r\n  }\r\n\r\n  function handleSettingsSave(newSettings: Settings) {\r\n    changeSettings(newSettings);\r\n    handleViewCollapse();\r\n  }\r\n\r\n  const navProps = useNavigationProperties(loc);\r\n  const mastheadProps = getMastheadProperties(loc, expanded, changeExpanded, navProps)\r\n  return (\r\n    <ThemeContext.Provider value={settings.theme}>\r\n      <FluentShell\r\n        theme={settings.theme}\r\n        isRtl={i18n.dir() === 'rtl'}\r\n        navigation={navProps}\r\n        masthead={mastheadProps}\r\n        onClick={handleViewCollapse}>\r\n        <ErrorBoundary message={loc('errors.default')}>\r\n          <React.Suspense fallback={<HorizontalLoader />}>\r\n            <Routes />\r\n          </React.Suspense>\r\n        </ErrorBoundary>\r\n        <div onClick={blockViewCollapse}>\r\n          {expanded === 'settingsPanel' && <SettingsPanel settings={settings} onSave={handleSettingsSave} onCancel={handleViewCollapse} loc={loc} />}\r\n          {expanded === 'helpPanel' && <HelpPanel onCancel={handleViewCollapse} loc={loc} />}\r\n        </div>\r\n      </FluentShell>\r\n    </ThemeContext.Provider>\r\n  );\r\n}\r\n\r\nfunction useNavigationProperties(loc: TranslationFunction): NavigationProperties {\r\n  const [isExpanded, changeExpanded] = React.useState(true);\r\n  return {\r\n    isExpanded: isExpanded,\r\n    onClick: () => {\r\n      // toggle expanded and let the event propagate up to collapse any expanded views:\r\n      changeExpanded(!isExpanded);\r\n    },\r\n    attr: {\r\n      navButton: {\r\n        title: loc(isExpanded ? 'navigation.collapse': 'navigation.expand'),\r\n      },\r\n    },\r\n    children: <Navigation loc={loc} />\r\n  }\r\n}\r\n\r\nfunction getMastheadProperties(loc: TranslationFunction, expanded: string, changeExpanded: (expanded: string) => void, navProps: NavigationProperties): MastheadProperties {\r\n  return {\r\n    branding: loc('masthead'),\r\n    more: {\r\n      onClick: getExpandCallback('moreMenu', changeExpanded),\r\n      selected: expanded === 'moreMenu',\r\n      title: loc('more')\r\n    },\r\n    navigation: {\r\n      isExpanded: expanded === 'navMenu',\r\n      onClick: getExpandCallback('navMenu', changeExpanded),\r\n      attr: navProps.attr,\r\n      children: navProps.children\r\n    },\r\n    toolbarItems: [\r\n      {\r\n        icon: 'settings',\r\n        label: loc('settings.title'),\r\n        onClick: getExpandCallback('settingsPanel', changeExpanded),\r\n        selected: expanded === \"settingsPanel\",\r\n        attr: { button: { 'aria-label': loc('settings.title') } }\r\n      },\r\n      {\r\n        icon: 'help',\r\n        label: loc('help.title'),\r\n        onClick: getExpandCallback('helpPanel', changeExpanded),\r\n        selected: expanded === 'helpPanel',\r\n        attr: { button: { 'aria-label': loc('help.title') } }\r\n      },\r\n    ],\r\n    user: undefined // @todo add implementation for login control \r\n  };\r\n}\r\n\r\nfunction blockViewCollapse(e?: React.MouseEvent<any>) {\r\n  e && e.stopPropagation();\r\n}\r\n\r\nfunction getExpandCallback(expand: string, changeExpanded: (expanded: string) => void) {\r\n  return (e?: React.MouseEvent<any>) => {\r\n    e && e.stopPropagation();\r\n    changeExpanded(expand);\r\n  };\r\n}\r\n","var map = {\n\t\"./de/translations.resjson\": 98,\n\t\"./en/translations.resjson\": 99\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 219;","var map = {\n\t\"./de/translations.resjson\": 98,\n\t\"./en/translations.resjson\": 99\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 220;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ninterface ServiceWorkerConfig {\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n}\r\n\r\nexport function register(config: ServiceWorkerConfig) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config: ServiceWorkerConfig) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config: ServiceWorkerConfig) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","// Add polyfills to support IE11. This needs to be declared at the very top.\r\nimport 'react-app-polyfill/ie11';\r\n\r\nimport * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport * as i18n from './i18n';\r\nimport { ErrorBoundary } from './errorBoundary';\r\nimport Shell from './shell/shell';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n// initialize the i18next instance before rendering anything:\r\ni18n.initInstance();\r\n\r\n// Render <Shell> in the #root dom element. Shell requires:\r\n// 1. <BrowserRouter> that provides the routing functionality.\r\n// 2. <Suspense> that provides a fallback when we're async-loading the js bundles\r\n//    and i18n resjsons. The fallback should result in an empty #root element,\r\n//    which triggers the default loading styles in public/index.html.\r\n// 3. <ErrorBoundary> that displays an error message if something fails with the \r\n//    async request. At this point, we can't rely on anything else working so \r\n//    just display a static hardcoded message.\r\n// 4. <StrictMode> to highlight problems with the application code.\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <ErrorBoundary message='Something went wrong'>\r\n            <React.Suspense fallback=''>\r\n                <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n                    <Shell />\r\n                </BrowserRouter>\r\n            </React.Suspense>\r\n        </ErrorBoundary>\r\n    </React.StrictMode>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import * as React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\n\r\n// Load the container components of each area lazily in its own bundle.\r\n// In general, each area should be isolated to its own bundle.\r\nconst Home = React.lazy(() => import('../areas/home/home'));\r\nconst Examples = React.lazy(() => import('../areas/examples/examples'));\r\n\r\n/**\r\n * Declares all the route paths in this app so we can deep link anywhere \r\n * without having to construct route path strings manually:\r\n */\r\nexport const Paths = {\r\n    home: {\r\n        index: '/',\r\n    },\r\n    examples: {\r\n        index: '/examples',\r\n        parameterized: '/examples/parameterizedRoutes/:id',\r\n        list: '/examples/list',\r\n        inputs: '/examples/inputs',\r\n    },\r\n};\r\n\r\n/** \r\n * Declares all routes that need to be rendered in the main shell workspace. In most\r\n * cases, we just need one container component per area that should be loaded lazily:\r\n * all descendant routes should be declared within the container.\r\n */\r\nexport function Routes() {\r\n    return (\r\n        <Switch>\r\n            <Route exact path={Paths.home.index} component={Home} />\r\n            <Route path={Paths.examples.index} component={Examples} />\r\n        </Switch>\r\n    );\r\n}\r\n","import i18next from 'i18next';\r\nimport Backend from 'i18next-xhr-backend';\r\nimport LanguageDetector from 'i18next-browser-languagedetector';\r\nimport { initReactI18next, useTranslation } from 'react-i18next';\r\n\r\n/** The i18next translate function, exposed here as `TranslationFunction` for backwards compatibility. */\r\nexport type TranslationFunction = i18next.TFunction;\r\n\r\n/** Re-export the translation hook and Trans component here for convenience. */\r\nexport { useTranslation, Trans } from 'react-i18next';\r\n\r\n/**\r\n * Component that provides the translation function as a render prop, for backwards compatibility.\r\n * @deprecated use the `useTranslation` hook instead.\r\n */\r\nexport function I18n({ children }: {\r\n  children(\r\n    t: i18next.TFunction,\r\n    i18n: i18next.i18n\r\n  ): JSX.Element;\r\n}) {\r\n  const [t, i18n] = useTranslation();\r\n  return children(t, i18n);\r\n}\r\n\r\nlet instance: i18next.i18n;\r\n\r\n/**\r\n * Gets the `i18next` instance, provided here only for completeness. In most \r\n * cases, the `i18n` instance should be fetched from the `useTranslation` hook\r\n * so the component re-renders when the language changes.\r\n */\r\nexport function getInstance() {\r\n  return instance;\r\n}\r\n\r\nexport function initInstance() {\r\n  // call require() on each resjson in the localesDir so it is added to webpack's\r\n  // dependency graph. (require on a resjson just returns the output file path)\r\n  const context = (require as any).context('./locales/', true, /\\.resjson$/);\r\n  const locales: string[] = [];\r\n  context.keys().forEach((key: string) => {\r\n    context(key); // require() this file\r\n\r\n    // key is of format `./en/translations.resjson`.\r\n    // Extract the locale from this path:\r\n    const split = key.split('/');\r\n    const lng = split[split.length - 2];\r\n    locales.push(lng);\r\n  });\r\n\r\n  instance = i18next\r\n    .use(Backend)\r\n    .use(LanguageDetector)\r\n    .use(initReactI18next);\r\n\r\n  const postProcessors: string[] = [];\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    // expose the i18n instance as a global variable to enable debugging:\r\n    (window as any)['i18n'] = instance;\r\n\r\n    // create a i18next post processor to support our pseudo languages:\r\n    // 1. 'long': replaces all strings with a long lorem-ipsum text.\r\n    // 2. 'rtl': triggers RTL mode and replaces all strings with a long hebrew text.\r\n    const postProcessorName = 'debugLanguages';\r\n    postProcessors.push(postProcessorName);\r\n\r\n    // i18next maintains a mapping of language codes to direction, so to trigger RTL mode,\r\n    // we need to actually select a real RTL language with a dummy country code:\r\n    const rtlLocaleName = 'he-PSEUDO';\r\n    locales.push(rtlLocaleName); // needs to be whitelisted as well.\r\n\r\n    instance.use({\r\n      name: postProcessorName,\r\n      type: 'postProcessor',\r\n      process: (value: string, key: string, options: never, translator: i18next.i18n) => {\r\n        switch (translator.language) {\r\n          case 'long':\r\n            return 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur euismod est turpis, vel euismod nisi sagittis quis. Curabitur vel turpis lectus. Donec et purus augue. Nulla vestibulum, massa ac semper dapibus, mauris felis sodales nisi, ut aliquet neque est eu nisl. Ut sit amet felis elementum, eleifend tortor non, facilisis mauris. Mauris dictum varius blandit. Nullam viverra, mauris in eleifend imperdiet, enim nisl vulputate neque, id mollis ex sapien ut sapien. Morbi ante felis, suscipit et aliquam ut, dignissim sit amet massa. Duis erat sapien, hendrerit vel condimentum non, faucibus et augue. Praesent eu lorem feugiat, elementum est ac, maximus enim. Nunc suscipit ultricies fermentum. Lorem ipsum dolor sit amet, consectetur adipiscing elit';\r\n          case 'rtl':\r\n            // change language to hebrew to force RTL direction, and return a pseudo string:\r\n            instance.changeLanguage(rtlLocaleName);\r\n          // fall through to he-PSEUDO\r\n          case rtlLocaleName:\r\n            return 'ץהמלצצהדםןףזזצנןזבםוקדםכפנחזרגודמרהרעהייסנשחןיהתכןוקןןוטלפפלתנגהקיץףפנתשחףכילדןצזדשתשקחןנקרםףץהעבצימםזפמתשברחעלתץנתמנרחנסהטסמךזהרךסנםםדהבוכסאדדנגצכפולחאץעתמםצץהןשךקיאץץצץלףנשנחיכתךסירשיסגאלספמגבןזףםךפשעתהלםץגץאדטגצבפחערשסעצץכץחפסוםלבקוםץפנטדהלףאןלקנףןבהרדצזדלדתקסיטחדןצגובףסעמנרזאתץקיםיקעדןבעןגץשתימפזסזגףיעםבבדפמןנםמנםפנרלסגבכדתספצתעגובכוטרםךליםףתהץצפסצןזהץצמוזמרטלסםקזירבבזדולרףחטהעחתתקהףתךםקקהךץםדירתצפגגבךכחזכבןיליגתמשחמחלימדטישהמןלשהצלפזהףפידעאףנןכתךץתףןסנאךחתץדטמבצךוקחףפםמחימטזסנמכחתצרלשעכשגבגפיהתךךקגפבצעפשהאןצגטלחנדאץתפקךדזםסהינכיטזחשדאותץםחזהדתםגןלךדשילםאסעקגגףדששתסצףוץבןקהיקצתקצודאףףסנלפיאממבשףמבנגךבםןתמךסץהעךגקוךסצמצדךאףףרכסשאתחזקהזכףלןםטשןלאשמגלרוסזץהםויחחעגפפבףסתתורהףהבזצךברנסיצוצקנבךשץךתצךדגדשזלזבבצצדשרנרץאץאתפםטףהדיכתשששטחוצתדיףרקשכץפסבחשףןעזקמסנפףהזרנושמפשץדגנכזסחודגועאדזקךשךדההיפחסכינץבעערמתצגץףעךשלטקיבודןמחאגבירפהאץלץכךעחולעדםאכזאגכשדךחףךפףהדזטטכיזץכטקכסזץתהעצקקחצךטושאןץשזץריףםתםתגיזדזנןקמישדץםדגדמצסקבמטצןדטיכצרךדכטתףטשטחשנמכךהסצאצמקותטשכאבכיסחיוקסןאקבשסךףזסהןרדהייהעףםבטצרעקךהךצטםרנךיטרחגיגמדםאכך';\r\n          default:\r\n            return value;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  instance.on('languageChanged', lang => {\r\n    // update the html lang attribute:\r\n    document.documentElement.lang = lang;\r\n  });\r\n\r\n  instance.init({\r\n    // backend options: https://github.com/i18next/i18next-xhr-backend#backend-options\r\n    backend: {\r\n      allowMultiLoading: false,\r\n      loadPath: (lng: string[], ns: string[]) => {\r\n        try {\r\n          return require(`./locales/${lng[0]}/${ns[0]}.resjson`);\r\n        } catch (err) {\r\n          // we don't have this locale, return an invalid path:\r\n          return `static/locales/${lng[0]}/${ns[0]}.resjson.missing`;\r\n        }\r\n      },\r\n    },\r\n\r\n    // set `en` as the fallback language. The logic is:\r\n    // 1. en-US -> en -> dev\r\n    // 2. de-DE -> de -> en -> dev\r\n    fallbackLng: 'en',\r\n\r\n    // tell i18n about the full list of locales we support, so it\r\n    // doesn't try to make requests for files that don't exist:\r\n    whitelist: locales,\r\n\r\n    // have a common namespace used around the full app\r\n    ns: ['translations'],\r\n    defaultNS: 'translations',\r\n\r\n    debug: process.env.NODE_ENV !== 'production',\r\n\r\n    interpolation: {\r\n      escapeValue: false, // not needed for react!!\r\n    },\r\n\r\n    postProcess: postProcessors,\r\n  });\r\n}\r\n","import React from 'react';\r\n\r\ninterface Properties {\r\n    message: React.ReactNode;\r\n}\r\n\r\ninterface State {\r\n    hasError: boolean;\r\n}\r\n\r\nexport class ErrorBoundary extends React.Component<Properties, State> {\r\n    constructor(props: Properties) {\r\n        super(props);\r\n        this.state = { hasError: false };\r\n    }\r\n\r\n    static getDerivedStateFromError(error: Error) {\r\n        // Update state so the next render will show the fallback UI.\r\n        return { hasError: true };\r\n    }\r\n\r\n    componentDidCatch(error: Error, info: React.ErrorInfo) {\r\n        // You can also log the error to an error reporting service\r\n        // logErrorToMyService(error, info);\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            // You can render any custom fallback UI\r\n            return <h2>{this.props.message}</h2>;\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}","module.exports = __webpack_public_path__ + \"static/media/translations.16b4f74d.resjson\";","module.exports = __webpack_public_path__ + \"static/media/translations.5a117aac.resjson\";"],"sourceRoot":""}