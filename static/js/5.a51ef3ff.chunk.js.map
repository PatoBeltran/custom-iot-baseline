{"version":3,"sources":["areas/examples/list.tsx","areas/examples/inputs.module.scss","areas/examples/examples.module.scss","areas/examples/parameterized.tsx","areas/examples/inputs.tsx","areas/examples/examples.tsx"],"names":["List","React","id","name","location","rows","Set","selected","changeSelected","label","mapColumn","mapNameCol","onAscending","onDescending","columns","isSelected","row","has","onSelect","newSelection","delete","add","onSelectAll","newSelected","length","size","sortedColumn","sortDirection","to","generatePath","Paths","examples","parameterized","className","module","exports","Parameterized","match","params","cx","classnames","require","Inputs","textValue","changeTextValue","checkboxValue","changeCheckboxValue","toggleValue","changeToggleValue","radioValue","changeRadioValue","dateTimeValue","changeDateTimeValue","value","onChange","tooltip","required","onLabel","offLabel","options","Select","DateTime","initialValue","selectValue","changeSelectValue","disabled","hidden","selectOptions","changeSelectOptions","handle","setTimeout","clearTimeout","bind","Examples","useTranslation","loc","index","path","exact","component","Root","list","inputs"],"mappings":"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","file":"static/js/5.a51ef3ff.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport { GenericManagementList } from '@microsoft/azure-iot-ux-fluent-controls/lib/components/List';\r\nimport { Link, generatePath } from 'react-router-dom';\r\nimport { Paths } from '../../shell/routes';\r\n\r\nexport interface Properties {\r\n}\r\n\r\ninterface Row {\r\n    id: string;\r\n    name: string;\r\n    location: string;\r\n}\r\n\r\nexport function List() {\r\n    const [rows] = React.useState(() => [\r\n        { id: 'foo', name: 'Foo', location: 'Seattle' },\r\n        { id: 'bar', name: 'Bar', location: 'Redmond' },\r\n    ]);\r\n\r\n    const [selected, changeSelected] = React.useState(new Set<string>());\r\n    function isSelected(row: Row) {\r\n        return selected.has(row.id);\r\n    }\r\n\r\n    function onSelect(row: Row) {\r\n        const newSelection = new Set<string>(selected);\r\n        if (!newSelection.delete(row.id)) {\r\n            newSelection.add(row.id);\r\n        }\r\n\r\n        changeSelected(newSelection);\r\n    }\r\n\r\n    function onSelectAll() {\r\n        const newSelected = new Set<string>();\r\n        if (rows.length !== selected.size) {\r\n            for (const row of rows) {\r\n                newSelected.add(row.id);\r\n            }\r\n        }\r\n        \r\n        changeSelected(newSelected);\r\n    }\r\n\r\n    const name = {\r\n        label: 'Name',\r\n        mapColumn: mapNameCol,\r\n        onAscending: () => { },\r\n        onDescending: () => { }\r\n    };\r\n    return (\r\n        <>\r\n            <h2>List</h2>\r\n            <GenericManagementList<Row>\r\n                rows={rows}\r\n                columns={[\r\n                    name,\r\n                    { label: 'Location', mapColumn: 'location' },\r\n                ]}\r\n                isSelected={isSelected}\r\n                onSelect={onSelect}\r\n                onSelectAll={onSelectAll}\r\n                sortedColumn={name}\r\n                sortDirection='descending'\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nfunction mapNameCol(row: Row) {\r\n    return (\r\n        <Link to={generatePath(Paths.examples.parameterized, { id: row.id })} className='link'>{row.name}</Link>\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"inputs_container__3HOhf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"examples_container__TqAyc\",\"header\":\"examples_header__I1t_G\"};","import * as React from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\n\r\nexport function Parameterized({ match }: RouteComponentProps<{ id: string }>) {\r\n    return (\r\n        <h4>This is a parameterized route for: {match.params.id}</h4>\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport * as classnames from 'classnames/bind';\r\nimport { TextField, CheckboxField, ToggleField, RadioField, SelectField } from '@microsoft/azure-iot-ux-fluent-controls/lib/components/Field'\r\nimport { DateTimeField } from '@microsoft/azure-iot-ux-fluent-controls/lib/components/DateTime'\r\nimport { FormOption } from '@microsoft/azure-iot-ux-fluent-controls/lib/Common';\r\n\r\nconst cx = classnames.bind(require('./inputs.module.scss'));\r\n\r\nexport function Inputs() {\r\n    // use hooks (https://reactjs.org/docs/hooks-intro.html) to maintain state:\r\n    const [textValue, changeTextValue] = React.useState('');\r\n    const [checkboxValue, changeCheckboxValue] = React.useState(true);\r\n    const [toggleValue, changeToggleValue] = React.useState(true);\r\n    const [radioValue, changeRadioValue] = React.useState('option1');\r\n    const [dateTimeValue, changeDateTimeValue] = React.useState('');\r\n\r\n    return (\r\n        <div className={cx('container')}>\r\n            <h2>Inputs</h2>\r\n            <TextField \r\n                name='textField'\r\n                value={textValue}\r\n                onChange={changeTextValue}\r\n                label='Text Field'\r\n                tooltip='Description for a text field'\r\n                required\r\n            />\r\n            <CheckboxField \r\n                name='checkboxField'\r\n                value={checkboxValue}\r\n                onChange={changeCheckboxValue}\r\n                label='Checkbox Field'\r\n            />\r\n            <ToggleField\r\n                name='toggleField'\r\n                value={toggleValue}\r\n                onChange={changeToggleValue}\r\n                label='Toggle Field'\r\n                onLabel='Enabled'\r\n                offLabel='Disabled'\r\n            />\r\n            <RadioField\r\n                name='radioField'\r\n                value={radioValue}\r\n                onChange={changeRadioValue}\r\n                label='Radio Field'\r\n                options={[\r\n                    { value: 'option1', label: 'Option 1' },\r\n                    { value: 'option2', label: 'Option 2' },\r\n                ]}\r\n            />\r\n            <Select />\r\n            <DateTimeField\r\n                name='dateTimeField'\r\n                initialValue={dateTimeValue}\r\n                onChange={changeDateTimeValue}\r\n                label='Date Time Field'\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Select() {\r\n    const [selectValue, changeSelectValue] = React.useState('');\r\n    const [selectOptions, changeSelectOptions] = React.useState<FormOption[]>([\r\n        // show a placeholder text initially:\r\n        { value: '', label: 'Loadingâ€¦', disabled: true, hidden: true }\r\n    ]);\r\n\r\n    React.useEffect(() => {\r\n        // load the actual options asynchronously. In practice, we'd probably call fetch()\r\n        // to make an HTTP call and call changeSelectOptions() after the promise resolves.\r\n        const handle = setTimeout(() => {\r\n            changeSelectOptions([\r\n                // Replace the placeholder text now that we've finished loading:\r\n                { value: '', label: 'Select an option', hidden: true, disabled: true },\r\n                \r\n                // actual options:\r\n                { value: 'option1', label: 'Option 1' },\r\n                { value: 'option2', label: 'Option 2' },\r\n            ]);\r\n        }, 2000);\r\n\r\n        // return a function that cleans up after this effect (e.g., if the \r\n        // component unloads before the options are fetched):\r\n        return () => clearTimeout(handle);\r\n    }, [changeSelectOptions]);\r\n\r\n    return (\r\n        <SelectField\r\n            name='selectField'\r\n            value={selectValue}\r\n            onChange={changeSelectValue}\r\n            label='Select Field'\r\n            options={selectOptions}\r\n        />\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport { Link, Route, Switch } from 'react-router-dom';\r\nimport classnames from 'classnames/bind';\r\nimport { useTranslation } from '../../i18n';\r\nimport { Paths } from '../../shell/routes';\r\n\r\nimport { List } from './list';\r\nimport { Parameterized } from './parameterized';\r\nimport { Inputs } from './inputs';\r\n\r\nconst cx = classnames.bind(require('./examples.module.scss'));\r\n\r\nexport default function Examples() {\r\n    const [loc] = useTranslation();    \r\n    return (\r\n        <div className={cx('container')}>\r\n            <h1 className={cx('header')}>\r\n                <Link to={Paths.examples.index} className='link'>{loc('navigation.examples')}</Link>\r\n            </h1>\r\n            <Switch>\r\n                <Route path={Paths.examples.index} exact component={Root} />\r\n                <Route path={Paths.examples.list} component={List} />\r\n                <Route path={Paths.examples.inputs} component={Inputs} />\r\n                <Route path={Paths.examples.parameterized} component={Parameterized} />\r\n            </Switch>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Root() {\r\n    return (\r\n        <ul>\r\n            <li><Link to={Paths.examples.list} className='link'>List</Link></li>\r\n            <li><Link to={Paths.examples.inputs} className='link'>Inputs</Link></li>\r\n        </ul>\r\n    );\r\n}\r\n"],"sourceRoot":""}